// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, urlSearchParamsBodySerializer, formDataBodySerializer } from '@hey-api/client-axios';
import type { LoginGetSmsCodeData, LoginGetSmsCodeError, LoginGetSmsCodeResponse, LoginLoginData, LoginLoginError, LoginLoginResponse, LoginLogoutError, LoginLogoutResponse, UsersReadUserMeError, UsersReadUserMeResponse, UsersDeleteUserMeError, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeError, UsersUpdateUserMeResponse, UsersSetProfileImageData, UsersSetProfileImageError, UsersSetProfileImageResponse, ImagesReadImageData, ImagesReadImageError, ImagesReadImageResponse, TodosReadInvitesData, TodosReadInvitesError, TodosReadInvitesResponse, TodosCreateInviteData, TodosCreateInviteError, TodosCreateInviteResponse, TodosAcceptInviteData, TodosAcceptInviteError, TodosAcceptInviteResponse, TodosDeclineInviteData, TodosDeclineInviteError, TodosDeclineInviteResponse, TodosReadTodosData, TodosReadTodosError, TodosReadTodosResponse, TodosCreateTodoData, TodosCreateTodoError, TodosCreateTodoResponse, TodosReadTodoData, TodosReadTodoError, TodosReadTodoResponse, TodosUpdateTodoData, TodosUpdateTodoError, TodosUpdateTodoResponse, TodosDeleteTodoData, TodosDeleteTodoError, TodosDeleteTodoResponse, AsyncapiServeAsyncapiSchemaData, AsyncapiServeAsyncapiSchemaError, AsyncapiServeAsyncapiSchemaResponse, AsyncapiDownloadAppJsonSchemaError, AsyncapiDownloadAppJsonSchemaResponse, AsyncapiDownloadAppYamlSchemaError, AsyncapiDownloadAppYamlSchemaResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get Sms Code
 */
export const loginGetSmsCode = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginGetSmsCodeData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginGetSmsCodeResponse, LoginGetSmsCodeError, ThrowOnError>({
        ...options,
        url: '/api/v1/auth/login/code'
    });
};

/**
 * Login
 */
export const loginLogin = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginLoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginLoginResponse, LoginLoginError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/api/v1/auth/login'
    });
};

/**
 * Logout
 */
export const loginLogout = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginLogoutResponse, LoginLogoutError, ThrowOnError>({
        ...options,
        url: '/api/v1/auth/logout/'
    });
};

/**
 * Read User Me
 * Get current user and refresh token
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersReadUserMeResponse, UsersReadUserMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Delete User Me
 * Delete a user and refresh token
 */
export const usersDeleteUserMe = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).delete<UsersDeleteUserMeResponse, UsersDeleteUserMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Update User Me
 * Update own user and refresh token
 */
export const usersUpdateUserMe = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UsersUpdateUserMeData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UsersUpdateUserMeResponse, UsersUpdateUserMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Set Profile Image
 */
export const usersSetProfileImage = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UsersSetProfileImageData, ThrowOnError>) => {
    return (options?.client ?? client).post<UsersSetProfileImageResponse, UsersSetProfileImageError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/api/v1/users/me/image'
    });
};

/**
 * Read Image
 */
export const imagesReadImage = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ImagesReadImageData, ThrowOnError>) => {
    return (options?.client ?? client).get<ImagesReadImageResponse, ImagesReadImageError, ThrowOnError>({
        ...options,
        url: '/api/v1/images/{image_id}'
    });
};

/**
 * Read Invites
 * Retrieve invites.
 */
export const todosReadInvites = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<TodosReadInvitesData, ThrowOnError>) => {
    return (options?.client ?? client).get<TodosReadInvitesResponse, TodosReadInvitesError, ThrowOnError>({
        ...options,
        url: '/api/v1/todos/invites/'
    });
};

/**
 * Create Invite
 * Create new invite.
 */
export const todosCreateInvite = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TodosCreateInviteData, ThrowOnError>) => {
    return (options?.client ?? client).post<TodosCreateInviteResponse, TodosCreateInviteError, ThrowOnError>({
        ...options,
        url: '/api/v1/todos/invites/'
    });
};

/**
 * Accept Invite
 * Accept invite by ID.
 */
export const todosAcceptInvite = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TodosAcceptInviteData, ThrowOnError>) => {
    return (options?.client ?? client).post<TodosAcceptInviteResponse, TodosAcceptInviteError, ThrowOnError>({
        ...options,
        url: '/api/v1/todos/invites/{invite_id}/accept'
    });
};

/**
 * Decline Invite
 * Accept invite by ID.
 */
export const todosDeclineInvite = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TodosDeclineInviteData, ThrowOnError>) => {
    return (options?.client ?? client).post<TodosDeclineInviteResponse, TodosDeclineInviteError, ThrowOnError>({
        ...options,
        url: '/api/v1/todos/invites/{invite_id}/decline'
    });
};

/**
 * Read Todos
 * Retrieve todos.
 */
export const todosReadTodos = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<TodosReadTodosData, ThrowOnError>) => {
    return (options?.client ?? client).get<TodosReadTodosResponse, TodosReadTodosError, ThrowOnError>({
        ...options,
        url: '/api/v1/todos/'
    });
};

/**
 * Create Todo
 * Create new todo.
 */
export const todosCreateTodo = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TodosCreateTodoData, ThrowOnError>) => {
    return (options?.client ?? client).post<TodosCreateTodoResponse, TodosCreateTodoError, ThrowOnError>({
        ...options,
        url: '/api/v1/todos/'
    });
};

/**
 * Read Todo
 * Get todo by ID.
 */
export const todosReadTodo = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TodosReadTodoData, ThrowOnError>) => {
    return (options?.client ?? client).get<TodosReadTodoResponse, TodosReadTodoError, ThrowOnError>({
        ...options,
        url: '/api/v1/todos/{todo_id}'
    });
};

/**
 * Update Todo
 * Update a todo.
 */
export const todosUpdateTodo = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TodosUpdateTodoData, ThrowOnError>) => {
    return (options?.client ?? client).put<TodosUpdateTodoResponse, TodosUpdateTodoError, ThrowOnError>({
        ...options,
        url: '/api/v1/todos/{todo_id}'
    });
};

/**
 * Delete Todo
 * Delete a todo.
 */
export const todosDeleteTodo = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TodosDeleteTodoData, ThrowOnError>) => {
    return (options?.client ?? client).delete<TodosDeleteTodoResponse, TodosDeleteTodoError, ThrowOnError>({
        ...options,
        url: '/api/v1/todos/{todo_id}'
    });
};

/**
 * Serve Asyncapi Schema
 * Serve the AsyncAPI schema as an HTML response.
 */
export const asyncapiServeAsyncapiSchema = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<AsyncapiServeAsyncapiSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).get<AsyncapiServeAsyncapiSchemaResponse, AsyncapiServeAsyncapiSchemaError, ThrowOnError>({
        ...options,
        url: '/asyncapi'
    });
};

/**
 * Download App Json Schema
 */
export const asyncapiDownloadAppJsonSchema = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<AsyncapiDownloadAppJsonSchemaResponse, AsyncapiDownloadAppJsonSchemaError, ThrowOnError>({
        ...options,
        url: '/asyncapi.json'
    });
};

/**
 * Download App Yaml Schema
 */
export const asyncapiDownloadAppYamlSchema = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<AsyncapiDownloadAppYamlSchemaResponse, AsyncapiDownloadAppYamlSchemaError, ThrowOnError>({
        ...options,
        url: '/asyncapi.yaml'
    });
};