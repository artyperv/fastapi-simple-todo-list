// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_users_set_profile_image = {
    file: (Blob | File);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ImageOutShort = {
    id: string;
    blur_hash: string;
    readonly url: string;
};

export type InviteOut = {
    id: string;
    todo: (TodoOutShort | null);
};

export type InvitesOut = {
    count: number;
    total: number;
    limit: number;
    skip: number;
    data: Array<InviteOut>;
};

export type Message = {
    message: string;
};

export type TodoCreate = {
    title: string;
    description?: (string | null);
    status?: TodoStatus;
};

export type TodoOut = {
    id: string;
    title: string;
    description: (string | null);
    status: TodoStatus;
    users?: Array<UserOut>;
    modified_at: Date;
};

export type TodoOutShort = {
    id: string;
    title: string;
    status: TodoStatus;
};

export type TodosOut = {
    count: number;
    total: number;
    limit: number;
    skip: number;
    data: Array<TodoOut>;
};

export type TodoStatus = 'new' | 'in_progress' | 'done';

export type TodoUpdate = {
    title: string;
    description?: (string | null);
    status?: TodoStatus;
    user_ids?: (Array<(string)> | null);
};

export type UserCreateOpen = {
    phone: string;
};

export type UserOut = {
    id: string;
    phone: number;
    name?: (string | null);
    email?: (string | null);
    profile_image?: (ImageOutShort | null);
};

export type UserPublicOutShort = {
    phone: number;
    name?: (string | null);
    profile_image?: (ImageOutShort | null);
};

export type UserUpdateMe = {
    name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginGetSmsCodeData = {
    body: UserCreateOpen;
};

export type LoginGetSmsCodeResponse = (UserPublicOutShort);

export type LoginGetSmsCodeError = (HTTPValidationError);

export type LoginLoginData = {
    body: Body_login_login;
};

export type LoginLoginResponse = (UserOut);

export type LoginLoginError = (HTTPValidationError);

export type LoginLogoutResponse = (Message);

export type LoginLogoutError = unknown;

export type UsersReadUserMeResponse = (UserOut);

export type UsersReadUserMeError = (HTTPValidationError);

export type UsersDeleteUserMeResponse = (Message);

export type UsersDeleteUserMeError = (HTTPValidationError);

export type UsersUpdateUserMeData = {
    body: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserOut);

export type UsersUpdateUserMeError = (HTTPValidationError);

export type UsersSetProfileImageData = {
    body: Body_users_set_profile_image;
};

export type UsersSetProfileImageResponse = (UserOut);

export type UsersSetProfileImageError = (HTTPValidationError);

export type ImagesReadImageData = {
    path: {
        image_id: string;
    };
};

export type ImagesReadImageResponse = (unknown);

export type ImagesReadImageError = (HTTPValidationError);

export type TodosReadInvitesData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type TodosReadInvitesResponse = (InvitesOut);

export type TodosReadInvitesError = (HTTPValidationError);

export type TodosCreateInviteData = {
    query: {
        todo_id: string;
        user_phone: number;
    };
};

export type TodosCreateInviteResponse = (InviteOut);

export type TodosCreateInviteError = (HTTPValidationError);

export type TodosAcceptInviteData = {
    path: {
        invite_id: string;
    };
};

export type TodosAcceptInviteResponse = (Message);

export type TodosAcceptInviteError = (HTTPValidationError);

export type TodosDeclineInviteData = {
    path: {
        invite_id: string;
    };
};

export type TodosDeclineInviteResponse = (Message);

export type TodosDeclineInviteError = (HTTPValidationError);

export type TodosReadTodosData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type TodosReadTodosResponse = (TodosOut);

export type TodosReadTodosError = (HTTPValidationError);

export type TodosCreateTodoData = {
    body: TodoCreate;
};

export type TodosCreateTodoResponse = (TodoOut);

export type TodosCreateTodoError = (HTTPValidationError);

export type TodosReadTodoData = {
    path: {
        todo_id: string;
    };
};

export type TodosReadTodoResponse = (TodoOut);

export type TodosReadTodoError = (HTTPValidationError);

export type TodosUpdateTodoData = {
    body: TodoUpdate;
    path: {
        todo_id: string;
    };
};

export type TodosUpdateTodoResponse = (TodoOut);

export type TodosUpdateTodoError = (HTTPValidationError);

export type TodosDeleteTodoData = {
    path: {
        todo_id: string;
    };
};

export type TodosDeleteTodoResponse = (Message);

export type TodosDeleteTodoError = (HTTPValidationError);

export type AsyncapiServeAsyncapiSchemaData = {
    query?: {
        errors?: boolean;
        expandMessageExamples?: boolean;
        info?: boolean;
        messages?: boolean;
        operations?: boolean;
        schemas?: boolean;
        servers?: boolean;
        sidebar?: boolean;
    };
};

export type AsyncapiServeAsyncapiSchemaResponse = (unknown);

export type AsyncapiServeAsyncapiSchemaError = (HTTPValidationError);

export type AsyncapiDownloadAppJsonSchemaResponse = (unknown);

export type AsyncapiDownloadAppJsonSchemaError = unknown;

export type AsyncapiDownloadAppYamlSchemaResponse = (unknown);

export type AsyncapiDownloadAppYamlSchemaError = unknown;

export type TodosReadTodosResponseTransformer = (data: any) => Promise<TodosReadTodosResponse>;

export type TodosOutModelResponseTransformer = (data: any) => TodosOut;

export type TodoOutModelResponseTransformer = (data: any) => TodoOut;

export const TodoOutModelResponseTransformer: TodoOutModelResponseTransformer = data => {
    if (data?.modified_at) {
        data.modified_at = new Date(data.modified_at);
    }
    return data;
};

export const TodosOutModelResponseTransformer: TodosOutModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(TodoOutModelResponseTransformer);
    }
    return data;
};

export const TodosReadTodosResponseTransformer: TodosReadTodosResponseTransformer = async (data) => {
    TodosOutModelResponseTransformer(data);
    return data;
};

export type TodosCreateTodoResponseTransformer = (data: any) => Promise<TodosCreateTodoResponse>;

export const TodosCreateTodoResponseTransformer: TodosCreateTodoResponseTransformer = async (data) => {
    TodoOutModelResponseTransformer(data);
    return data;
};

export type TodosReadTodoResponseTransformer = (data: any) => Promise<TodosReadTodoResponse>;

export const TodosReadTodoResponseTransformer: TodosReadTodoResponseTransformer = async (data) => {
    TodoOutModelResponseTransformer(data);
    return data;
};

export type TodosUpdateTodoResponseTransformer = (data: any) => Promise<TodosUpdateTodoResponse>;

export const TodosUpdateTodoResponseTransformer: TodosUpdateTodoResponseTransformer = async (data) => {
    TodoOutModelResponseTransformer(data);
    return data;
};