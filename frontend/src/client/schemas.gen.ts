// This file is auto-generated by @hey-api/openapi-ts

export const Body_login_loginSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login'
} as const;

export const Body_users_set_profile_imageSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_users-set_profile_image'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const ImageOutShortSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        blur_hash: {
            type: 'string',
            title: 'Blur Hash'
        },
        url: {
            type: 'string',
            title: 'Url',
            readOnly: true
        }
    },
    type: 'object',
    required: ['id', 'blur_hash', 'url'],
    title: 'ImageOutShort'
} as const;

export const InviteOutSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        todo: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TodoOutShort'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['id', 'todo'],
    title: 'InviteOut'
} as const;

export const InvitesOutSchema = {
    properties: {
        count: {
            type: 'integer',
            title: 'Count'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        skip: {
            type: 'integer',
            title: 'Skip'
        },
        data: {
            items: {
                '$ref': '#/components/schemas/InviteOut'
            },
            type: 'array',
            title: 'Data'
        }
    },
    type: 'object',
    required: ['count', 'total', 'limit', 'skip', 'data'],
    title: 'InvitesOut'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message'
} as const;

export const TodoCreateSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        status: {
            '$ref': '#/components/schemas/TodoStatus',
            default: 'new'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'TodoCreate'
} as const;

export const TodoOutSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        status: {
            '$ref': '#/components/schemas/TodoStatus'
        },
        users: {
            items: {
                '$ref': '#/components/schemas/UserOut'
            },
            type: 'array',
            title: 'Users',
            default: []
        },
        modified_at: {
            type: 'string',
            format: 'date-time',
            title: 'Modified At'
        }
    },
    type: 'object',
    required: ['id', 'title', 'description', 'status', 'modified_at'],
    title: 'TodoOut'
} as const;

export const TodoOutShortSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        status: {
            '$ref': '#/components/schemas/TodoStatus'
        }
    },
    type: 'object',
    required: ['id', 'title', 'status'],
    title: 'TodoOutShort'
} as const;

export const TodoStatusSchema = {
    type: 'string',
    enum: ['new', 'in_progress', 'done'],
    title: 'TodoStatus'
} as const;

export const TodoUpdateSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        status: {
            '$ref': '#/components/schemas/TodoStatus',
            default: 'new'
        },
        user_ids: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Ids'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'TodoUpdate'
} as const;

export const TodosOutSchema = {
    properties: {
        count: {
            type: 'integer',
            title: 'Count'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        skip: {
            type: 'integer',
            title: 'Skip'
        },
        data: {
            items: {
                '$ref': '#/components/schemas/TodoOut'
            },
            type: 'array',
            title: 'Data'
        }
    },
    type: 'object',
    required: ['count', 'total', 'limit', 'skip', 'data'],
    title: 'TodosOut'
} as const;

export const UserCreateOpenSchema = {
    properties: {
        phone: {
            type: 'string',
            title: 'Phone'
        }
    },
    type: 'object',
    required: ['phone'],
    title: 'UserCreateOpen'
} as const;

export const UserOutSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        phone: {
            type: 'integer',
            title: 'Phone'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        profile_image: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ImageOutShort'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['id', 'phone'],
    title: 'UserOut'
} as const;

export const UserPublicOutShortSchema = {
    properties: {
        phone: {
            type: 'integer',
            title: 'Phone'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        profile_image: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ImageOutShort'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['phone'],
    title: 'UserPublicOutShort'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;