// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { LoginGetSmsCodeData, LoginGetSmsCodeError, LoginGetSmsCodeResponse, LoginLoginData, LoginLoginError, LoginLoginResponse, LoginLogoutError, LoginLogoutResponse, UsersDeleteUserMeError, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeError, UsersUpdateUserMeResponse, UsersSetProfileImageData, UsersSetProfileImageError, UsersSetProfileImageResponse, ImagesReadImageData, TodosReadInvitesData, TodosCreateInviteData, TodosCreateInviteError, TodosCreateInviteResponse, TodosAcceptInviteData, TodosAcceptInviteError, TodosAcceptInviteResponse, TodosDeclineInviteData, TodosDeclineInviteError, TodosDeclineInviteResponse, TodosReadTodosData, TodosCreateTodoData, TodosCreateTodoError, TodosCreateTodoResponse, TodosReadTodoData, TodosUpdateTodoData, TodosUpdateTodoError, TodosUpdateTodoResponse, TodosDeleteTodoData, TodosDeleteTodoError, TodosDeleteTodoResponse, AsyncapiServeAsyncapiSchemaData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client, loginGetSmsCode, loginLogin, loginLogout, usersReadUserMe, usersDeleteUserMe, usersUpdateUserMe, usersSetProfileImage, imagesReadImage, todosReadInvites, todosCreateInvite, todosAcceptInvite, todosDeclineInvite, todosReadTodos, todosCreateTodo, todosReadTodo, todosUpdateTodo, todosDeleteTodo, asyncapiServeAsyncapiSchema, asyncapiDownloadAppJsonSchema, asyncapiDownloadAppYamlSchema } from '../sdk.gen';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const loginGetSmsCodeQueryKey = (options: OptionsLegacyParser<LoginGetSmsCodeData>) => [
    createQueryKey('loginGetSmsCode', options)
];

export const loginGetSmsCodeOptions = (options: OptionsLegacyParser<LoginGetSmsCodeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginGetSmsCode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginGetSmsCodeQueryKey(options)
    });
};

export const loginGetSmsCodeMutation = (options?: Partial<OptionsLegacyParser<LoginGetSmsCodeData>>) => {
    const mutationOptions: UseMutationOptions<LoginGetSmsCodeResponse, AxiosError<LoginGetSmsCodeError>, OptionsLegacyParser<LoginGetSmsCodeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginGetSmsCode({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginLoginQueryKey = (options: OptionsLegacyParser<LoginLoginData>) => [
    createQueryKey('loginLogin', options)
];

export const loginLoginOptions = (options: OptionsLegacyParser<LoginLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginLoginQueryKey(options)
    });
};

export const loginLoginMutation = (options?: Partial<OptionsLegacyParser<LoginLoginData>>) => {
    const mutationOptions: UseMutationOptions<LoginLoginResponse, AxiosError<LoginLoginError>, OptionsLegacyParser<LoginLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginLogoutQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('loginLogout', options)
];

export const loginLogoutOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginLogoutQueryKey(options)
    });
};

export const loginLogoutMutation = (options?: Partial<OptionsLegacyParser>) => {
    const mutationOptions: UseMutationOptions<LoginLogoutResponse, AxiosError<LoginLogoutError>, OptionsLegacyParser> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginLogout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersReadUserMeQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('usersReadUserMe', options)
];

export const usersReadUserMeOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersReadUserMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersReadUserMeQueryKey(options)
    });
};

export const usersDeleteUserMeMutation = (options?: Partial<OptionsLegacyParser>) => {
    const mutationOptions: UseMutationOptions<UsersDeleteUserMeResponse, AxiosError<UsersDeleteUserMeError>, OptionsLegacyParser> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersDeleteUserMe({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersUpdateUserMeMutation = (options?: Partial<OptionsLegacyParser<UsersUpdateUserMeData>>) => {
    const mutationOptions: UseMutationOptions<UsersUpdateUserMeResponse, AxiosError<UsersUpdateUserMeError>, OptionsLegacyParser<UsersUpdateUserMeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersUpdateUserMe({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersSetProfileImageQueryKey = (options: OptionsLegacyParser<UsersSetProfileImageData>) => [
    createQueryKey('usersSetProfileImage', options)
];

export const usersSetProfileImageOptions = (options: OptionsLegacyParser<UsersSetProfileImageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersSetProfileImage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersSetProfileImageQueryKey(options)
    });
};

export const usersSetProfileImageMutation = (options?: Partial<OptionsLegacyParser<UsersSetProfileImageData>>) => {
    const mutationOptions: UseMutationOptions<UsersSetProfileImageResponse, AxiosError<UsersSetProfileImageError>, OptionsLegacyParser<UsersSetProfileImageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersSetProfileImage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const imagesReadImageQueryKey = (options: OptionsLegacyParser<ImagesReadImageData>) => [
    createQueryKey('imagesReadImage', options)
];

export const imagesReadImageOptions = (options: OptionsLegacyParser<ImagesReadImageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await imagesReadImage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: imagesReadImageQueryKey(options)
    });
};

export const todosReadInvitesQueryKey = (options?: OptionsLegacyParser<TodosReadInvitesData>) => [
    createQueryKey('todosReadInvites', options)
];

export const todosReadInvitesOptions = (options?: OptionsLegacyParser<TodosReadInvitesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await todosReadInvites({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: todosReadInvitesQueryKey(options)
    });
};

export const todosCreateInviteQueryKey = (options: OptionsLegacyParser<TodosCreateInviteData>) => [
    createQueryKey('todosCreateInvite', options)
];

export const todosCreateInviteOptions = (options: OptionsLegacyParser<TodosCreateInviteData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await todosCreateInvite({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: todosCreateInviteQueryKey(options)
    });
};

export const todosCreateInviteMutation = (options?: Partial<OptionsLegacyParser<TodosCreateInviteData>>) => {
    const mutationOptions: UseMutationOptions<TodosCreateInviteResponse, AxiosError<TodosCreateInviteError>, OptionsLegacyParser<TodosCreateInviteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await todosCreateInvite({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const todosAcceptInviteQueryKey = (options: OptionsLegacyParser<TodosAcceptInviteData>) => [
    createQueryKey('todosAcceptInvite', options)
];

export const todosAcceptInviteOptions = (options: OptionsLegacyParser<TodosAcceptInviteData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await todosAcceptInvite({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: todosAcceptInviteQueryKey(options)
    });
};

export const todosAcceptInviteMutation = (options?: Partial<OptionsLegacyParser<TodosAcceptInviteData>>) => {
    const mutationOptions: UseMutationOptions<TodosAcceptInviteResponse, AxiosError<TodosAcceptInviteError>, OptionsLegacyParser<TodosAcceptInviteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await todosAcceptInvite({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const todosDeclineInviteQueryKey = (options: OptionsLegacyParser<TodosDeclineInviteData>) => [
    createQueryKey('todosDeclineInvite', options)
];

export const todosDeclineInviteOptions = (options: OptionsLegacyParser<TodosDeclineInviteData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await todosDeclineInvite({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: todosDeclineInviteQueryKey(options)
    });
};

export const todosDeclineInviteMutation = (options?: Partial<OptionsLegacyParser<TodosDeclineInviteData>>) => {
    const mutationOptions: UseMutationOptions<TodosDeclineInviteResponse, AxiosError<TodosDeclineInviteError>, OptionsLegacyParser<TodosDeclineInviteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await todosDeclineInvite({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const todosReadTodosQueryKey = (options?: OptionsLegacyParser<TodosReadTodosData>) => [
    createQueryKey('todosReadTodos', options)
];

export const todosReadTodosOptions = (options?: OptionsLegacyParser<TodosReadTodosData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await todosReadTodos({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: todosReadTodosQueryKey(options)
    });
};

export const todosCreateTodoQueryKey = (options: OptionsLegacyParser<TodosCreateTodoData>) => [
    createQueryKey('todosCreateTodo', options)
];

export const todosCreateTodoOptions = (options: OptionsLegacyParser<TodosCreateTodoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await todosCreateTodo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: todosCreateTodoQueryKey(options)
    });
};

export const todosCreateTodoMutation = (options?: Partial<OptionsLegacyParser<TodosCreateTodoData>>) => {
    const mutationOptions: UseMutationOptions<TodosCreateTodoResponse, AxiosError<TodosCreateTodoError>, OptionsLegacyParser<TodosCreateTodoData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await todosCreateTodo({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const todosReadTodoQueryKey = (options: OptionsLegacyParser<TodosReadTodoData>) => [
    createQueryKey('todosReadTodo', options)
];

export const todosReadTodoOptions = (options: OptionsLegacyParser<TodosReadTodoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await todosReadTodo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: todosReadTodoQueryKey(options)
    });
};

export const todosUpdateTodoMutation = (options?: Partial<OptionsLegacyParser<TodosUpdateTodoData>>) => {
    const mutationOptions: UseMutationOptions<TodosUpdateTodoResponse, AxiosError<TodosUpdateTodoError>, OptionsLegacyParser<TodosUpdateTodoData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await todosUpdateTodo({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const todosDeleteTodoMutation = (options?: Partial<OptionsLegacyParser<TodosDeleteTodoData>>) => {
    const mutationOptions: UseMutationOptions<TodosDeleteTodoResponse, AxiosError<TodosDeleteTodoError>, OptionsLegacyParser<TodosDeleteTodoData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await todosDeleteTodo({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const asyncapiServeAsyncapiSchemaQueryKey = (options?: OptionsLegacyParser<AsyncapiServeAsyncapiSchemaData>) => [
    createQueryKey('asyncapiServeAsyncapiSchema', options)
];

export const asyncapiServeAsyncapiSchemaOptions = (options?: OptionsLegacyParser<AsyncapiServeAsyncapiSchemaData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await asyncapiServeAsyncapiSchema({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: asyncapiServeAsyncapiSchemaQueryKey(options)
    });
};

export const asyncapiDownloadAppJsonSchemaQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('asyncapiDownloadAppJsonSchema', options)
];

export const asyncapiDownloadAppJsonSchemaOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await asyncapiDownloadAppJsonSchema({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: asyncapiDownloadAppJsonSchemaQueryKey(options)
    });
};

export const asyncapiDownloadAppYamlSchemaQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('asyncapiDownloadAppYamlSchema', options)
];

export const asyncapiDownloadAppYamlSchemaOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await asyncapiDownloadAppYamlSchema({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: asyncapiDownloadAppYamlSchemaQueryKey(options)
    });
};